Index: src/lib_user.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.dbConnect import cursor, connection\n\n\ndef add_lib_user(fname, sname, other_name, user_type, **kwargs):\n    if user_type == 'STUDENT':\n        std_class = kwargs['std_class']\n        stream = kwargs['stream']\n        sql = '''\n            insert into lib_user(lib_no,first_name,second_name,user_type, other_name,class,stream)\n            values(?,?,?,'STUDENT',?,?,?)\n        '''\n\n        gen_sql = '''select lib_no from lib_user where user_type = 'STUDENT' order by lib_no desc limit 1'''\n        latest = cursor.execute(gen_sql).fetchone()\n\n        if latest:\n            lib_no = 'PP' + prefixer(str(int(latest[0].split(latest[0][1])[2]) + 1))\n        else:\n            lib_no = 'PP001'\n\n        success_insert = cursor.execute(sql, [lib_no, fname, sname, other_name, std_class, stream])\n\n    else:\n        phone_no = kwargs['phone_no']\n        sql = ''' insert into lib_user(lib_no, first_name, second_name, other_name,user_type, phone_number)\n                    values(?,?,?,?,'STAFF',?)'''\n\n        gen_sql = '''select lib_no from lib_user where user_type = 'STAFF' order by lib_no desc limit 1'''\n        latest = cursor.execute(gen_sql).fetchone()\n\n        if latest:\n            lib_no = 'STF' + prefixer(str(int(latest[0].split(latest[0][2])[1]) + 1))\n        else:\n            lib_no = 'STF001'\n\n        success_insert = cursor.execute(sql, [lib_no, fname, sname, other_name, phone_no])\n\n    if success_insert:\n        connection.commit()\n        return True\n    else:\n        return False\n\n\ndef all_students():\n    students = cursor.execute(\n        'select lib_no, first_name,second_name,other_name,class,stream from lib_user where user_type = \"STUDENT\"'). \\\n        fetchall()\n\n    new_student_list = []\n    for student in students:\n        new_student_list.append(\n            [student[0], student[1].capitalize() + ' ' + student[2].capitalize() + ' ' + student[3].capitalize(),\n             str(student[4]) + ' ' + student[5].capitalize()])\n    return new_student_list\n\n\ndef all_staff(user_type='normal'):\n    if user_type == 'super':\n        sql = '''select l.lib_no, l.first_name, l.second_name, l.other_name,l.phone_number, a.is_superadmin\n                from lib_user l\n                left join authentication a on l.lib_no = a.lib_no\n                where user_type = 'STAFF' '''\n    else:\n        sql = 'select lib_no, first_name, second_name, other_name, phone_number from lib_user where user_type = ' \\\n              '\"STAFF\" '\n\n    staff = cursor.execute(sql)\n\n    new_staff_list = []\n    for each_staff in staff:\n        row = [each_staff[0], each_staff[1] + ' ' + each_staff[2].capitalize() + ' ' + each_staff[3].capitalize(),\n               each_staff[4]]\n        if len(each_staff) == 6:\n            if each_staff[5]:\n                row.append('Super Admin')\n            else:\n                row.append('Admin')\n\n        new_staff_list.append(row)\n\n    return new_staff_list\n\n\ndef prefixer(string):\n    if len(string) == 1:\n        return '00' + string\n    elif len(string) == 2:\n        return '0' + string\n    else:\n        return string\n\n\ndef create_admin(lib_no, password=None):\n    if password:\n        sql = '''select lib_no from authentication where lib_no = ?'''\n        if cursor.execute(sql, [lib_no]).fetchone():\n            sql = '''select lib_no from authentication where lib_no =? and password is null'''\n            if cursor.execute(sql, [lib_no]).fetchone():\n                sql = '''update authentication set password = ? where lib_no = ?'''\n                cursor.execute(sql, [password, lib_no])\n                connection.commit()\n                return True,\n            else:\n                return False, f'User {lib_no} already exists'\n        else:\n            return False, 'Sorry you are not authorised to perform this action'\n    else:\n        sql = \"\"\"INSERT INTO authentication(lib_no) values(?)\"\"\"\n        result = cursor.execute(sql, [lib_no])\n        connection.commit()\n        return result\n\n\ndef login_admin(lib_no, password):\n    sql = '''SELECT lib_no from authentication where lib_no = ? and password = ?'''\n    result = cursor.execute(sql, [lib_no, password]).fetchone()\n    return result\n\n\ndef change_password(lib_no, old_password, new_password):\n    sql = '''select lib_no from authentication where lib_no = ? and password = ?'''\n    result = cursor.execute(sql, [lib_no, old_password]).fetchone()\n    if result:\n        sql = '''update authentication set password = ? where lib_no = ?'''\n        result = cursor.execute(sql, [new_password, lib_no])\n        connection.commit()\n        if result:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef update_staff(lib_no, first_name, second_name, other_name, phone_no):\n    sql = '''update lib_user set first_name = ?, second_name = ?, other_name = ?, phone_number = ?where lib_no = ?'''\n    result = cursor.execute(sql, [first_name, second_name, other_name, phone_no, lib_no])\n    if result:\n        connection.commit()\n        return True\n    else:\n        return False\n\n\ndef get_staff_details(lib_no):\n    sql = '''select first_name, second_name, other_name, phone_number from lib_user where lib_no = ?'''\n    result = cursor.execute(sql, [lib_no]).fetchone()\n    if result:\n        return result\n    else:\n        return False\n\n\ndef get_admin_type(lib_no):\n    sql = '''select is_superadmin from authentication where lib_no = ?'''\n    result = cursor.execute(sql, [lib_no]).fetchone()\n    if result[0]:\n        return 'super'\n    else:\n        return 'normal'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib_user.py b/src/lib_user.py
--- a/src/lib_user.py	
+++ b/src/lib_user.py	
@@ -159,3 +159,13 @@
         return 'super'
     else:
         return 'normal'
+
+
+def delete_admin(lib_no):
+    sql = '''delete from authentication where lib_no = ?'''
+    result = cursor.execute(sql, [lib_no])
+    if result:
+        connection.commit()
+        return True
+    else:
+        return False
Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import hashlib\nimport string\nimport sys\nimport time\nimport pyqtgraph as pg\nimport numpy as np\n\nimport qtawesome as qta\nfrom PyQt5 import QtWidgets, uic\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import *\n\nfrom src.book import new_book, blacklist, unblacklist\nfrom src.book_borrow import new_borrow, all_borrows, return_book, is_blacklisted, range_selection, \\\n    range_selection_by_date, \\\n    borrowing_history\nfrom src.helper import *\nfrom src.lib_user import *\nfrom src import resources\n\n\nclass ChangePassword(QDialog):\n    def __init__(self, *args, **kwargs):\n        self.lib_no = kwargs.get('lib_no')\n        del kwargs['lib_no']\n        super(ChangePassword, self).__init__(*args, **kwargs)\n        self.ui = uic.loadUi('../UI/passwordchange.ui', self)\n        self.changeConfirmPassword.textChanged.connect(lambda: password_matcher(self.changePasswordError,\n                                                                                self.changeNewPassword,\n                                                                                self.changeConfirmPassword))\n        self.btnChangePassword.clicked.connect(self.pchanger)\n\n    def pchanger(self):\n        if not self.changePasswordError.text():\n            password1 = self.changeOldPassword.text()\n            password2 = self.changeNewPassword.text()\n            password1 = password_hasher(self.lib_no, password1)\n            password2 = password_hasher(self.lib_no, password2)\n\n            pchange = change_password(self.lib_no, password1, password2)\n            if pchange:\n                success_message('Password changed successfully', 'Password changed')\n                self.accept()\n            else:\n                error_message('An internal error occurred \\n please contact system admin', 'Internal error')\n        else:\n            error_message('fix the errors displayed above first!', 'Fix errors first')\n\n\nclass UpdateProfile(QDialog):\n    def __init__(self, *args, **kwargs):\n        self.lib_no = kwargs.get('lib_no')\n        del kwargs['lib_no']\n        super(UpdateProfile, self).__init__(*args, **kwargs)\n        self.ui = uic.loadUi('../UI/updateprofile.ui', self)\n        self.btnUpdateProfile.clicked.connect(self.update)\n        self.pre_fill()\n\n    def pre_fill(self):\n        details = get_staff_details(self.lib_no)\n        self.updateFName.setText(details[0].capitalize())\n        self.updateSName.setText(details[1].capitalize())\n        self.updateOName.setText(details[2].capitalize())\n        self.updatePhone.setText(details[3])\n        self.lblUserName.setText(details[0].capitalize()+' '+details[1].capitalize()+' '+details[2].capitalize())\n\n    def update(self):\n        first_name = self.updateFName.text().upper()\n        second_name = self.updateSName.text().upper()\n        other_name = self.updateOName.text().upper()\n        phone = self.updatePhone.text()\n\n        updated = update_staff(self.lib_no, first_name, second_name, other_name, phone)\n        if updated:\n            success_message('Profile updated successfully', 'Profile updated')\n            self.accept()\n        else:\n            error_message('Internal error occurred', 'Internal, error')\n\n\nclass BlacklistReason(QDialog):\n    def __init__(self, *args, **kwargs):\n        super(BlacklistReason, self).__init__(*args, **kwargs)\n        self.ui = uic.loadUi('../UI/BlacklistingDialog.ui', self)\n\n\ndef success_message(message, box_title):\n    msg = QMessageBox(QMessageBox.Information, box_title, message)\n    msg.setStyleSheet('background-color:#800000;color:white;font-size:15px')\n    msg.exec_()\n\n\ndef error_message(message, box_title):\n    msg = QMessageBox(QMessageBox.Critical, box_title, message)\n    msg.setStyleSheet('background-color:#800000;color:white;font-size:15px')\n    msg.exec_()\n\n\nclass Login(QDialog):\n    def __init__(self, *args, **kwargs):\n        super(Login, self).__init__(*args, **kwargs)\n        self.ui = uic.loadUi('../UI/login.ui', self)\n\n        # ======================== pages ====================================================\n        self.btnLogin.clicked.connect(self.authenticate)\n        self.btnToSignup.clicked.connect(lambda: self.pages.setCurrentWidget(self.signupPage))\n        self.btnToLogin.clicked.connect(lambda: self.pages.setCurrentWidget(self.loginPage))\n        self.btnToLogin.click()\n\n        # ======================= password match checking ====================================\n        self.signupConfirmPassword.textChanged.connect(\n            lambda: password_matcher(self.lblSignUpError, self.signupNewPassword, self.signupConfirmPassword))\n\n        # ===================== sign up functionality ======================\n        self.signUp.clicked.connect(self.new_sign_up)\n\n    def authenticate(self):\n        lib_no = self.loginLibNo.text().upper()\n        password = hashlib.pbkdf2_hmac(\"sha256\", self.loginPassword.text().encode(), lib_no.encode(), 100000).hex()\n        success = login_admin(lib_no, password)\n        if success:\n            self.accept()\n        else:\n            display_label_error(self.errorLabel, 'Invalid login credentials')\n\n    def new_sign_up(self):\n        lib_no = self.signupLibNo.text().upper()\n        password = hashlib.pbkdf2_hmac(\"sha256\", self.signupNewPassword.text().encode(), lib_no.encode(), 100000).hex()\n        result = create_admin(lib_no, password=password)\n        if result[0]:\n            success_message('Account create successfully. You will be automatically loged in after this', 'Success')\n            self.loginLibNo.setText(lib_no)\n            self.accept()\n        else:\n            self.show_sign_up_error(result[1])\n\n\nclass Ui(QtWidgets.QMainWindow):\n    can_borrow = False\n    global_book_list = []\n    global_book_borrow_list = []\n    global_staff_list = []\n    logged_user: string = ''\n    logged_user_type: string = ''\n\n    def __init__(self):\n        super(Ui, self).__init__()\n        self.ui = uic.loadUi('../UI/main2.ui', self)\n\n        # ================================== login ================================\n        self.login()\n\n        # ============================= tab navigators ===========================\n        self.previousButton = self.btnLibSession\n\n        self.activeButton(self.btnLibSession)  # default page\n\n        self.ui.btnBooks.clicked.connect(lambda: self.activeButton(self.btnBooks))\n        self.ui.btnLibSession.clicked.connect(lambda: self.activeButton(self.btnLibSession))\n        self.ui.btnStudents.clicked.connect(lambda: self.activeButton(self.btnStudents))\n        self.ui.btnStaff.clicked.connect(lambda: self.activeButton(self.btnStaff))\n        self.ui.btnSettings.clicked.connect(lambda: self.activeButton(self.btnSettings))\n        self.ui.btnReport.clicked.connect(lambda: self.activeButton(self.btnReport))\n\n        # ============================== Saving data to the database ===============================\n        self.ui.btnSaveStd.clicked.connect(self.new_student)\n        self.ui.stfSaveDetails.clicked.connect(self.new_staff)\n        self.ui.btnSaveBook.clicked.connect(self.add_new_book)\n        self.ui.btnBorrowBook.clicked.connect(self.new_book_borrow)\n\n\n        # ================== Some constraints to enable/disable buttons ===========================\n        self.txtLibNoBorrow.editingFinished.connect(self.validate_lib_user)\n        self.txtBookIdBorrow.editingFinished.connect(self.validate_book)\n\n        # ================= Minimum date =========================================================\n        self.ui.dtReturnDateBorrow.setMinimumDate(dt.today())\n        self.ui.dayBookAdded.setMinimumDate(dt.today())\n\n        # ==================== ui text initialization ===========================================\n        self.show_book_borrow_error('')\n\n        # ====================== context menu ========================================\n        self.ui.tblBorrow.customContextMenuRequested.connect(self.borrow_table_menu)\n        self.ui.tblBooks.customContextMenuRequested.connect(self.book_table_menu)\n        self.ui.tblReport.customContextMenuRequested.connect(self.report_table_menu)\n        self.ui.tblStaff.customContextMenuRequested.connect(self.staff_table_menu)\n\n        # ======================= setting icons ======================================\n        self.btnBooks.setIcon(self.icon('fa5s.book', scale=1.3))\n        self.btnLibSession.setIcon(self.icon('fa5s.book-reader', scale=1.3))\n        self.btnStudents.setIcon(self.icon('fa5s.user-graduate', scale=1.3))\n        self.btnStaff.setIcon(self.icon('fa5s.user-secret', scale=1.3))\n        spin_icon = qta.icon('fa5s.cog', color='white', animation=qta.Spin(self.btnSettings))\n        self.btnSettings.setIcon(spin_icon)\n        self.btnUsers.setIcon(self.icon(\"fa5s.user\"))\n\n        # ====================== additional ui customisation ========================\n        self.btnSettings.setText('')\n        self.btnSettings.setToolTip('Settings')\n\n        self.btnUsers.setText('')\n\n        # =======================vertical box ======================================\n        self.mywidget = QWidget()\n        self.graphScroll.setWidget(self.mywidget)\n        self.vbox = QVBoxLayout()\n        self.mywidget.setLayout(self.vbox)\n        self.mywidget.setMaximumHeight(16777215)\n        # ====================== search functionallity ==============================\n        self.txtBookSearch.setPlaceholderText('Search...')\n        self.txtBorrowSearch.setPlaceholderText('Search...')\n        self.txtStaffSearch.setPlaceholderText('Search...')\n        self.txtStudentSearch.setPlaceholderText('Search...')\n\n        self.txtBookSearch.textChanged.connect(\n            lambda: self.insert_into_table(self.tblBooks, search(self.global_book_list, self.txtBookSearch.text())))\n        self.txtBorrowSearch.textChanged.connect(lambda: self.insert_into_table(self.tblBorrow,\n                                                                                search(self.global_book_borrow_list,\n                                                                                       self.txtBorrowSearch.text())))\n        self.txtStaffSearch.textChanged.connect(\n            lambda: self.insert_into_table(self.tblStaff, search(self.global_staff_list, self.txtStaffSearch.text())))\n        self.txtStudentSearch.textChanged.connect(lambda: self.insert_into_table(self.tblStudent,\n                                                                                 search(self.global_student_list,\n                                                                                        self.txtStaffSearch.tet())))\n        # =================================== Menu buttons ===============================\n        self.btnUsers.setMenu(self.update_profile_menu())\n\n        # ================================= report =============================================\n        self.generateRangeReport.clicked.connect(self.range_report)\n        # ============================= Logout =====================================\n        self.btnLogout.clicked.connect(self.login)\n        # =================================================================================\n        self.showMaximized()\n\n    def new_student(self):\n        ui = self.ui\n\n        fname = ui.txtStdFname.text().upper()\n        sname = ui.txtStdSname.text().upper()\n        oname = ui.txtStdOname.text().upper()\n        user_type = 'STUDENT'\n        std_class = ui.txtStdClass.text()\n        stream = ui.txtStdStream.text().upper()\n\n        details = add_lib_user(fname, sname, oname, user_type, std_class=std_class, stream=stream)\n\n        if details:\n            ui.clearStudentDetails.click()\n            self.populate_student_table()\n\n    def new_staff(self):\n        ui = self.ui\n\n        fname = ui.stfFirstName.text().upper()\n        sname = ui.stfSecondName.text().upper()\n        oname = ui.stfOtherName.text().upper()\n        user_type = 'STAFF'\n        phone_no = ui.stfPhoneNo.text()\n\n        details = add_lib_user(fname, sname, oname, user_type, phone_no=phone_no)\n\n        if details:\n            ui.clearStaffDetails.click()\n            self.populate_staff_table()\n\n    def add_new_book(self):\n        book_id = self.bookIdDetails.text().upper()\n        book_name = self.bookNameDetails.text().upper()\n        date_added = self.dayBookAdded.date().toPyDate()\n        book_category = self.cmbBookCategory.currentText().upper()\n\n        success = new_book(book_id, book_name, date_added, book_category)\n\n        if success:\n            self.clearBookDetails.click()\n            self.populate_book_table()\n        else:\n            self.error_message('A book with such details exists', 'Book exists!')\n\n    def new_book_borrow(self):\n        ui = self.ui\n        lib_no = ui.txtLibNoBorrow.text().upper()\n        book_id = ui.txtBookIdBorrow.text().upper()\n        return_date = ui.dtReturnDateBorrow.date().toPyDate()\n        today = time.strftime('%Y-%m-%d')\n\n        success = new_borrow(lib_no, book_id, today, return_date)\n\n        if success == 'blacklisted':\n            self.error_message('The book is currently blacklisted', \"Blacklisted\")\n        elif success == 'active':\n            self.error_message('Return the previous book first', \"Invalid\")\n        else:\n            self.populate_borrow_book_table()\n            self.btnClearBookBorrow.click()\n\n    def populate_student_table(self):\n        ui = self.ui\n\n        students = all_students()\n        self.global_student_list = students\n\n        self.insert_into_table(ui.tblStudent, students)\n\n    def populate_staff_table(self):\n        ui = self.ui\n        staff = all_staff(user_type=self.logged_user_type)\n        self.global_staff_list = staff\n\n        self.insert_into_table(ui.tblStaff, staff)\n        self.autocomplete(ui.txtLibNoBorrow, list_to_string(staff, 0))\n\n    def populate_book_table(self):\n        ui = self.ui\n\n        books = all_books()\n        self.global_book_list = books\n\n        self.autocomplete(ui.txtBookIdBorrow, list_to_string(books, 0))\n        self.insert_into_table(ui.tblBooks, books)\n\n    def populate_borrow_book_table(self):\n        ui = self.ui\n        borrows = all_borrows()\n        self.global_book_borrow_list = borrows\n        self.set_min_and_max_date()\n\n        self.insert_into_table(ui.tblBorrow, borrows)\n\n    def clear_table(self, table):\n        size = table.rowCount() - 1\n        while size >= 0:\n            table.removeRow(size)\n            size -= 1\n\n    def insert_into_table(self, table, details):\n        self.clear_table(table)\n\n        row = 0\n        for detail in details:\n            table.insertRow(row)\n            column = 0\n            for data in detail:\n                data = QtWidgets.QTableWidgetItem(str(data))\n                table.setItem(row, column, data)\n                column += 1\n            row += 1\n        table.resizeColumnsToContents()\n\n    def validate_lib_user(self):\n        ui = self.ui\n        lib_no = ui.txtLibNoBorrow.text().upper()\n        lib_user_exists = search_lib_user(lib_no)\n        if lib_user_exists:\n            name = lib_user_exists[1]\n            ui.txtUserNameBorrow.setText(name)\n            self.activate_borrow_button()\n        else:\n            self.can_borrow = False\n            ui.txtUserNameBorrow.clear()\n            self.show_book_borrow_error('Please ensure that all data provided is correct!!!')\n            ui.btnBorrowBook.setEnabled(False)\n\n    def validate_book(self):\n        ui = self.ui\n        book_id = ui.txtBookIdBorrow.text().upper()\n        book_available = search_book(book_id)\n        if book_available:\n            ui.txtBookNameBorrow.setText(book_available[1])\n            self.activate_borrow_button()\n        else:\n            self.can_borrow = False\n            ui.txtBookNameBorrow.clear()\n            self.show_book_borrow_error('Please ensure that all data provided is correct !!!')\n            ui.btnBorrowBook.setEnabled(False)\n\n    def activate_borrow_button(self):\n        if self.can_borrow:\n            self.ui.btnBorrowBook.setEnabled(True)\n            self.show_book_borrow_error('')\n        else:\n            self.show_book_borrow_error('Please ensure that all data provided is correct !!!')\n            self.can_borrow = True\n\n    def show_book_borrow_error(self, error):\n        if error:\n            self.ui.lblBookBorrowError.setStyleSheet('color:red;\\nbackground-color:white;\\nborder-radius:4px;')\n            self.ui.lblBookBorrowError.setText(error)\n        else:\n            self.ui.lblBookBorrowError.setStyleSheet('')\n            self.ui.lblBookBorrowError.setText('')\n\n    def autocomplete(self, lineedit, data):\n        completer = QCompleter(data)\n        completer.setCaseSensitivity(Qt.CaseInsensitive)\n        lineedit.setCompleter(completer)\n\n    def borrow_table_menu(self, position):\n\n        menu = QMenu()\n        menu.setTitle(\"hello world\")\n        removeRow = menu.addAction(\"Set Returned\")\n        removeIcon = qta.icon('fa5.check-circle')\n        removeRow.setIcon(removeIcon)\n        removeRow.setShortcut('ctrl+r')\n\n        action = menu.exec_(self.ui.tblBorrow.mapToGlobal(position))\n        if action == removeRow:\n            self.book_return()\n\n    def update_profile_menu(self):\n        menu = QMenu()\n        menu.addAction(qta.icon('fa5.edit'), 'Edit profile', self.update_user_profile, 'ctrl+e')\n        menu.addAction(qta.icon('fa5s.key'), 'Change password', self.change_user_password)\n        return menu\n\n    def update_user_profile(self):\n        dlg = UpdateProfile(self, lib_no=self.logged_user.upper())\n        dlg.exec_()\n\n    def change_user_password(self):\n        dlg = ChangePassword(self, lib_no=self.logged_user.upper())\n        dlg.exec_()\n\n    def book_table_menu(self, position):\n        menu = QMenu()\n        menu.setStyleSheet('font-weight:bold;font-size:13px;')\n        removeRow = menu.addAction(\"Remove Book\")\n        removeRow.setIcon(qta.icon('fa5.check-circle'))\n        editRecord = menu.addAction('Edit details')\n        editRecord.setIcon(qta.icon('fa5.edit'))\n        menu.addSeparator()\n        book_id = self.tblBooks.item(self.tblBooks.currentRow(), 0).text()\n        if is_blacklisted(book_id):\n            menu.addAction(qta.icon('fa5s.lock-open', color='red'), \"ublacklist\", lambda: self.unblacklist(book_id),\n                           'ctrl+u')\n        else:\n            menu.addAction(qta.icon('fa5s.ban', color='red'), \"blacklist\", lambda: self.blacklist(book_id), 'ctrl+l')\n\n        action = menu.exec_(self.ui.tblBooks.mapToGlobal(position))\n\n        if action == editRecord:\n            self.edit_books()\n\n    def staff_table_menu(self, position):\n        menu = QMenu()\n        menu.addAction(self.icon('fa5s.user-plus', color='black'), 'Add as admin', self.add_admin)\n        menu.exec_(self.ui.tblStaff.mapToGlobal(position))\n\n    def add_admin(self):\n        lib_no = self.tblStaff.item(self.tblStaff.currentRow(), 0).text()\n        if create_admin(lib_no):\n            self.success_message(f\"lib number {lib_no} activated successifully as admin\", 'Admin added')\n        else:\n            self.error_message('an internal error ocurred', 'Fatal')\n\n    def report_table_menu(self, position):\n        menu = QMenu()\n        menu.addAction('View graph', self.create_book_usage_graph)\n        menu.exec_(self.ui.tblReport.mapToGlobal(position))\n\n    def blacklist(self, book_id):\n        dlg = BlacklistReason(self)\n        dlg.exec_()\n\n        if dlg.result():\n            reason = dlg.blacklistReason.toPlainText()\n            if blacklist(book_id, reason):\n                self.success_message(f'Book <b>{book_id}</b> has been blacklisted', 'Success')\n\n    def unblacklist(self, book_id):\n        if unblacklist(book_id):\n            self.success_message(f'Book have been <b>{book_id}</b> unblacklisted', 'Success')\n\n    def icon(self, icon_name, color='white', scale=1):\n        return qta.icon(icon_name, color=color, scale_factor=scale)\n\n    def activeButton(self, currentButton):\n        if currentButton.objectName() == 'btnLibSession':\n            self.pages.setCurrentWidget(self.pgLibSession)\n        elif currentButton.objectName() == 'btnBooks':\n            self.pages.setCurrentWidget(self.pgBooks)\n        elif currentButton.objectName() == 'btnStudents':\n            self.pages.setCurrentWidget(self.pgStudents)\n        elif currentButton.objectName() == 'btnStaff':\n            self.pages.setCurrentWidget(self.pgStaff)\n        elif currentButton.objectName() == 'btnSettings':\n            self.pages.setCurrentWidget(self.pgSettings)\n        elif currentButton.objectName() == 'btnReport':\n            self.pages.setCurrentWidget(self.pgReport)\n\n        self.previousButton.setStyleSheet('padding-left:10px;\\npadding-right:5px;')\n\n        currentButton.setStyleSheet('padding-left:10px;border:none;padding-right:5px;')\n        self.previousButton = currentButton\n\n    def book_return(self):\n        lib_no = self.tblBorrow.item(self.tblBorrow.currentRow(), 0).text()\n        book_no = self.tblBorrow.item(self.tblBorrow.currentRow(), 2).text()\n        success = return_book(lib_no, book_no)\n        if success:\n            self.populate_borrow_book_table()\n\n    def edit_books(self):\n        row = self.tblBooks.currentRow()\n        book_id = self.tblBooks.item(row, 0).text()\n        book_name = self.tblBooks.item(row, 1).text()\n        book_category = self.tblBooks.item(row, 2).text()\n        date_added = self.tblBooks.item(row, 3).text()\n\n        self.bookIdDetails.setText(book_id)\n        self.bookNameDetails.setText(book_name)\n        self.dayBookAdded.setDate(dt.strptime(date_added, '%Y-%m-%d'))\n        self.cmbBookCategory.setCurrentText(book_category.capitalize())\n\n    def range_report(self):\n        from_date = self.fromDate.date().toPyDate()\n        to_date = self.toDate.date().toPyDate()\n\n        result = range_selection(from_date, to_date)\n        self.createtable(self.tblReport, ['Book Name', 'Category', 'Form or class', 'Times Borrowed'])\n        self.insert_into_table(self.tblReport, result)\n\n        self.txtTotalBooks.setText(get_total(result, 3))\n\n    def create_book_usage_graph(self):\n        from_date = self.fromDate.date().toPyDate()\n        to_date = self.toDate.date().toPyDate()\n        row = self.tblReport.currentRow()\n        book_name = self.tblReport.item(row, 0).text()\n        book_category = self.tblReport.item(row, 1).text()\n        form_class = self.tblReport.item(row, 2).text()\n\n        result = range_selection_by_date(book_name, book_category, form_class, from_date, to_date)\n        graph_axis = one_to_two_lists(result)\n        graph = self.create_graph()\n\n        self.vbox.addStretch()\n        self.vbox.insertWidget(self.vbox.count() - 1, graph)\n        graph.setMinimumHeight(300)\n        pen = pg.mkPen(color=(255, 0, 0))\n        graph.plot(pos=np.array(result))\n        graph.setBackground('w')\n        graph.setTitle(f'<u style = \"color: blue; font-size:10em;\">Graph for {book_name} class/ form {form_class}</u>')\n\n        graph.setLabel('left', \"<span style=\\\"color:red\\\">Number of books borrowed (°C)</span>\")\n        graph.setLabel('bottom', \"<span style=\\\"color:red;\\\">Dates</span>\")\n        graph.showGrid(x=True, y=True)\n\n    def create_graph(self):\n        graph_widget = pg.PlotWidget()\n        return graph_widget\n\n    def createtable(self, table, columns):\n        table.setColumnCount(len(columns))\n        table.setHorizontalHeaderLabels(columns)\n\n    def error_message(self, message, box_title):\n        msg = QMessageBox(QMessageBox.Critical, box_title, message)\n        msg.setStyleSheet('background-color:#800000;color:white;font-size:15px')\n\n        self.setWindowOpacity(0.5)\n        msg.exec_()\n        self.setWindowOpacity(1)\n\n    def set_min_and_max_date(self):\n        date_list = get_date_list(borrowing_history(), 3)\n        self.fromDate.setMinimumDate(min(date_list))\n        self.toDate.setMinimumDate(min(date_list))\n        self.fromDate.setMaximumDate(max(date_list))\n        self.toDate.setMaximumDate(max(date_list))\n        self.onDate.setMinimumDate(max(date_list))\n        self.onDate.setMaximumDate(max(date_list))\n\n    def login(self):\n        dlg = Login(self)\n        self.setWindowOpacity(0)\n        dlg.exec_()\n\n        if not dlg.result():\n            exit()\n        else:\n            self.logged_user = dlg.loginLibNo.text().upper()\n            self.logged_user_type = get_admin_type(self.logged_user)\n\n            self.lblLoginName.setText(\n                f\"logged as: <span style = 'color: blue;font-size:16px;'>{self.logged_user.upper()}</span>\")\n\n            # ====================populate tables =====================================================\n            self.populate_student_table()\n            # self.populate_staff_table()\n            self.populate_book_table()\n            self.populate_borrow_book_table()\n\n    def success_message(self, message, box_title):\n        msg = QMessageBox(QMessageBox.Information, box_title, message)\n        msg.setStyleSheet('background-color:#800000;color:white;font-size:15px')\n        self.setWindowOpacity(0.5)\n        msg.exec_()\n        self.setWindowOpacity(1)\n\n\napp = QtWidgets.QApplication(sys.argv)\nwindow = Ui()\napp.exec_()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.py b/src/main.py
--- a/src/main.py	
+++ b/src/main.py	
@@ -445,9 +445,23 @@
 
     def staff_table_menu(self, position):
         menu = QMenu()
-        menu.addAction(self.icon('fa5s.user-plus', color='black'), 'Add as admin', self.add_admin)
+        user_type = self.tblStaff.item(self.tblStafff.currentRow(),3).text().lower()
+        if user_type == 'super admin':
+            pass
+        elif user_type == 'admin':
+            menu.addAction(self.icon('fa5s-times', color = 'red'), 'Remove from admin', self.remove_from_admin)
+        else:
+            menu.addAction(self.icon('fa5s.user-plus', color='black'), 'Add as admin', self.add_admin)
+
         menu.exec_(self.ui.tblStaff.mapToGlobal(position))
 
+    def remove_from_admin(self):
+        lib_no = self.tblStaff.item(sel.tblStaff.currentRow(),0).text().upper()
+        if delete_admin(lib_no):
+            success_message('Admin deleted successfully','Admin deleted')
+            self.populate_staff_table()
+        else:
+            error_message('Internal error occurred \n please contact admin for details','Error')
     def add_admin(self):
         lib_no = self.tblStaff.item(self.tblStaff.currentRow(), 0).text()
         if create_admin(lib_no):
@@ -587,11 +601,7 @@
             self.lblLoginName.setText(
                 f"logged as: <span style = 'color: blue;font-size:16px;'>{self.logged_user.upper()}</span>")
 
-            # ====================populate tables =====================================================
-            self.populate_student_table()
-            # self.populate_staff_table()
-            self.populate_book_table()
-            self.populate_borrow_book_table()
+        self.setWindowOpacity(1)
 
     def success_message(self, message, box_title):
         msg = QMessageBox(QMessageBox.Information, box_title, message)
